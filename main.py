from flask import Flask,request,Response
import json,datetime
import pandas as pd


import File as f
import Book 
import generalFunctions as General


app = Flask(__name__)


# Retrieve a list of all available books
@app.route('/books',methods = ['GET'])
def get_all_books():
   return General.send_response(all_books,"success",200)


# Retrieve a list of available books based on a specified category.
@app.route('/author/<author>',methods = ['GET'])
def get_all_books_by_author(author):
   data = Book.get_book_from_list_by_identifier('Book-Author',all_books,author)
   if data:
      return General.send_response(data,"success",200)
   return General.send_response("Books not found","error",404)
   
               
# Retrieve detailed information about a specific book.
@app.route('/book/<id>',methods = ['GET'])
def get_all_books_by_id(id):
   data = Book.get_book_from_list_by_identifier('ISBN',all_books,id)
   if data:
      return General.send_response(data,"success",200)         
   return General.send_response("Books not found","error",404)


# Retrieve a list of available books that was released by a specific publisher
@app.route('/publisher/<publisher>',methods = ['GET'])
def get_all_books_by_publisher(publisher):
   data = Book.get_book_from_list_by_identifier('Publisher',all_books,publisher)
   if data:
      return General.send_response(data,"success",200)
   return General.send_response("Books not found","error",404)


#Retrieve a list of available books that was released on a specific year or between certain dates (e.g., from 2000 to 2005)
@app.route('/date/<date>',methods = ['GET'])
def get_all_books_by_date(date):

   data = Book.get_book_from_list_by_identifier('Year-Of-Publication',all_books,date)
   if data:

      return General.send_response(data,"success",200)
   return General.send_response("Books not found","error",404)


#Rent a book, making it unavailable for others to rent.
@app.route('/rent/<id>',methods = ['POST'])
def set_book_as_rented(id):
   
   result = Book.is_available_for_rent(id,all_books)
   if not result:
      return General.send_response("Book not available for rent","error",400)
   else:
   #3.add book on another file or table
      Book.rent_book(result,all_books_df,all_rented_df)
      return General.send_response("Book rented successfully","success",200)
   


# Return a rented book and calculate the rental fee based on the number of days rented.
@app.route('/return/<id>',methods = ['PUT'])
def get_rented_book(id):

      result = Book.get_book_from_list_by_identifier("ISBN",all_rented,id)

      if(result):
         rental_fee = Book.return_book(result,all_books_df,all_rented_df)

         return Response(json.dumps({"status":"success","status code":200,"message": "Book returned successfully", "rental_fee": rental_fee}), content_type='application/json', status=200)
      return Response(json.dumps({"status":"error","status code":400,"message": "Book not found or not currently rented"}), content_type='application/json', status=400)


# Retrieve a list of books that were rented within a specified date range.
@app.route('/rentals',methods = ['GET'])
def get_all_rented_books_for_period():
      
      start_date,end_date = General.check_url_date_args(request.args)

      data = Book.get_book_list_by_range(all_rented,start_date,end_date)

      return General.send_response(data,"success",200) 


#Calculate and retrieve the total revenue generated by book rentals within a specified date range.
@app.route('/revenue',methods = ['GET'])
def get_total_revenue():

   start_date,end_date = General.check_url_date_args(request.args)

   # books_rented_within_range = Book.get_book_list_by_range(all_rented,start_date,end_date)
   # print(books_rented_within_range)

   data = Book.calculate_total_rental_fee(all_rented_df)
   return General.send_response(data,"success",200) 
      



if __name__ == '__main__':
   #Read n=20 books with non-zero-rating
   all_books_df = f.read_data(20)
   print(all_books_df)

   # Convert DataFrame to a list of dictionaries
   all_books = all_books_df.to_dict(orient='records')

   # Update ratings data from ratings csv
   all_rented_df = pd.read_csv("./data/RentedBooks.csv")

   # Convert DataFrame to a list of dictionaries
   all_rented = all_rented_df.to_dict(orient='records')

   app.run(debug=True)

